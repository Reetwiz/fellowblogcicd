name: Build, Deploy, and Release

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write
  security-events: write

jobs:
  filter:
    name: Detect Changes
    runs-on: backend-runner
    outputs:
      has_code_changes: ${{ steps.changes.outputs.any_changed }}
      build_frontend: ${{ steps.changes.outputs.frontend }}
      build_backend1: ${{ steps.changes.outputs.backend1 }}
      build_backend2: ${{ steps.changes.outputs.backend2 }}
      previous_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get previous tag
        id: get_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Detect changed files
        id: changes
        uses: tj-actions/changed-files@v44
        with:
          files: |
            frontend:
              - 'frontend/**'
            backend1:
              - 'backend1/**'
            backend2:
              - 'backend2/**'
          files_ignore: |
            **/*.md
            .github/workflows/**
            .gitignore

  prepare_version:
    name: Prepare Version
    needs: filter
    if: needs.filter.outputs.has_code_changes == 'true' && github.ref_name == 'main'
    runs-on: backend-runner
    outputs:
      version: ${{ steps.changelog.outputs.version }}
      tag: ${{ steps.changelog.outputs.tag }}
      skipped: ${{ steps.changelog.outputs.skipped }}
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          preset: "conventionalcommits"
          github-token: ${{ secrets.GITHUB_TOKEN }}

  process-frontend:
    name: Process Frontend
    needs: [filter, prepare_version]
    if: always() && needs.filter.outputs.has_code_changes == 'true'
    runs-on: frontend-runner
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Set image names and tags
        id: image_meta
        run: |
          REPO_SUFFIX=${{ github.ref_name == 'main' && '-prod' || '-dev' }}
          IMAGE_NAME="reetwiz/fellowblogs-frontend${REPO_SUFFIX}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          if [[ "${{ github.ref_name }}" == "main" && "${{ needs.prepare_version.outputs.version }}" != "" ]]; then
            echo "IMAGE_TAG=${{ needs.prepare_version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=dev-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi
      - name: Build and Push (if changed)
        if: needs.filter.outputs.build_frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
            VITE_BACKEND1_BASE_URL=http://backend1:3000
            VITE_BACKEND2_BASE_URL=http://backend2:3001
          cache-from: type=gha,scope=frontend-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=frontend-${{ github.ref_name }}
      - name: Re-tag and Push (if not changed on main)
        if: needs.filter.outputs.build_frontend == 'false' && github.ref_name == 'main'
        run: |
          PREVIOUS_IMAGE="reetwiz/fellowblogs-frontend-prod:${{ needs.filter.outputs.previous_tag }}"
          docker pull "${PREVIOUS_IMAGE}"
          docker tag "${PREVIOUS_IMAGE}" "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker push "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      - name: Save Docker image as artifact
        run: docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o frontend.tar
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-${{ env.IMAGE_TAG }}.tar
          path: frontend.tar

  process-backend1:
    name: Process Backend 1
    needs: [filter, prepare_version]
    if: always() && needs.filter.outputs.has_code_changes == 'true'
    runs-on: backend-runner
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Set image names and tags
        run: |
          REPO_SUFFIX=${{ github.ref_name == 'main' && '-prod' || '-dev' }}
          IMAGE_NAME="reetwiz/fellowblogs-backend1${REPO_SUFFIX}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          if [[ "${{ github.ref_name }}" == "main" && "${{ needs.prepare_version.outputs.version }}" != "" ]]; then
            echo "IMAGE_TAG=${{ needs.prepare_version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=dev-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi
      - name: Build and Push (if changed)
        if: needs.filter.outputs.build_backend1 == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend1
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=backend1-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=backend1-${{ github.ref_name }}
      - name: Re-tag and Push (if not changed on main)
        if: needs.filter.outputs.build_backend1 == 'false' && github.ref_name == 'main'
        run: |
          PREVIOUS_IMAGE="reetwiz/fellowblogs-backend1-prod:${{ needs.filter.outputs.previous_tag }}"
          docker pull "${PREVIOUS_IMAGE}"
          docker tag "${PREVIOUS_IMAGE}" "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker push "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      - name: Save Docker image as artifact
        run: docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o backend1.tar
      - uses: actions/upload-artifact@v4
        with:
          name: backend1-${{ env.IMAGE_TAG }}.tar
          path: backend1.tar

  process-backend2:
    name: Process Backend 2
    needs: [filter, prepare_version]
    if: always() && needs.filter.outputs.has_code_changes == 'true'
    runs-on: backend-runner
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Set image names and tags
        run: |
          REPO_SUFFIX=${{ github.ref_name == 'main' && '-prod' || '-dev' }}
          IMAGE_NAME="reetwiz/fellowblogs-backend2${REPO_SUFFIX}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          if [[ "${{ github.ref_name }}" == "main" && "${{ needs.prepare_version.outputs.version }}" != "" ]]; then
            echo "IMAGE_TAG=${{ needs.prepare_version.outputs.version }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=dev-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi
      - name: Build and Push (if changed)
        if: needs.filter.outputs.build_backend2 == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend2
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha,scope=backend2-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=backend2-${{ github.ref_name }}
      - name: Re-tag and Push (if not changed on main)
        if: needs.filter.outputs.build_backend2 == 'false' && github.ref_name == 'main'
        run: |
          PREVIOUS_IMAGE="reetwiz/fellowblogs-backend2-prod:${{ needs.filter.outputs.previous_tag }}"
          docker pull "${PREVIOUS_IMAGE}"
          docker tag "${PREVIOUS_IMAGE}" "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker push "${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
      - name: Save Docker image as artifact
        run: docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o backend2.tar
      - uses: actions/upload-artifact@v4
        with:
          name: backend2-${{ env.IMAGE_TAG }}.tar
          path: backend2.tar

  security-scans:
    name: Security Scans
    needs: [filter, prepare_version, process-frontend, process-backend1]
    if: always() && !needs.prepare_version.outputs.skipped && needs.filter.outputs.has_code_changes == 'true' && github.ref_name == 'main'
    runs-on: backend-runner
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Trivy on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'reetwiz/fellowblogs-frontend-prod:${{ needs.prepare_version.outputs.version }}'
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-frontend-report.html'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      - name: Run Trivy on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'reetwiz/fellowblogs-backend1-prod:${{ needs.prepare_version.outputs.version }}'
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-backend-report.html'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      - name: Run Semgrep and generate HTML report
        uses: semgrep/semgrep-action@v2
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          generate-sarif: "true"
      - run: semgrep scan --config auto --html -o semgrep-report.html
      - uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-frontend-report.html
            trivy-backend-report.html
            semgrep.sarif
            semgrep-report.html

  deploy-to-vm:
    name: Deploy Application to VM
    needs: [filter, prepare_version, process-frontend, process-backend1, process-backend2, security-scans]
    if: always() && !needs.prepare_version.outputs.skipped && needs.filter.outputs.has_code_changes == 'true' && github.ref_name == 'main'
    runs-on: backend-runner
    environment: production
    steps:
      - name: Copy deployment files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.VM_USERNAME }}/reetwiz-fellowblogs-cd"
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export TAG=${{ needs.prepare_version.outputs.version }}
            cd /home/${{ secrets.VM_USERNAME }}/reetwiz-fellowblogs-cd
            echo "Logging in to Docker Hub..."
            docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
            echo "Pulling latest images with tag: ${TAG}..."
            docker-compose pull
            echo "Restarting services..."
            docker-compose up -d --remove-orphans
            echo "Pruning old Docker images..."
            docker image prune -af
            echo "Deployment of version ${TAG} completed successfully!"

  publish-reports-and-release:
    name: Publish Reports and Release
    needs: [prepare_version, security-scans, deploy-to-vm]
    if: always() && !needs.prepare_version.outputs.skipped
    runs-on: backend-runner
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: ./reports
      - name: Upload Semgrep SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./reports/semgrep.sarif
      - name: Prepare Pages directory for reports
        run: |
          mkdir -p ./_site/scan
          mv ./reports/trivy-frontend-report.html ./_site/scan/
          mv ./reports/trivy-backend-report.html ./_site/scan/
          mv ./reports/semgrep-report.html ./_site/scan/
          echo '<html><body><h1>Security Scan Reports</h1><ul><li><a href="trivy-frontend-report.html">Trivy Frontend Report</a></li><li><a href="trivy-backend-report.html">Trivy Backend Report</a></li><li><a href="semgrep-report.html">Semgrep Code Scan Report</a></li></ul><p>Detailed Semgrep results are also integrated into the repository Security tab.</p></body></html>' > ./_site/scan/index.html
      - name: Upload reports artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare_version.outputs.tag }}
          name: Release ${{ needs.prepare_version.outputs.tag }}
          body: |
            ${{ needs.prepare_version.outputs.clean_changelog }}
            
            **Deployments:**
            - **Application URL:** [http://192.168.226.128](http://192.168.226.128)
            - **Security Scan Reports:** [${{ steps.deployment.outputs.page_url }}/scan](${{ steps.deployment.outputs.page_url }}/scan)
          token: ${{ secrets.GITHUB_TOKEN }}